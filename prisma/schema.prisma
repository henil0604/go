// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Auth
model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  name          String?
  // add extra user properties here...
  // eg. gender, bio...
  accounts      Account[]
  sessions      Session[]
  links         Link[]
  redirects     Redirect[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id String @id @default(cuid()) @map("_id")

  url                String
  alias              String?
  passwordProtection Boolean @default(false)
  password           String?
  selfBurn           Boolean @default(false)
  requiresAuth       Boolean @default(false)

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  redirects Redirect[]

  redirect_count       Int @default(0)
  unique_visitor_count Int @default(0)
}

model Redirect {
  id String @id @default(cuid()) @map("_id")

  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  linkId String

  ip String?

  visitor   User?   @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  visitorId String?

  redirectedAt DateTime @default(now())
}
